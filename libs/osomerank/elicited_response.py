#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue June 4 2024

@author: Ozgur (modified by Bao)
"""

from transformers import (
    AutoModelForSequenceClassification,
    AutoTokenizer,
    TextClassificationPipeline,
)
import re
import configparser
import os
from collections import defaultdict
from osomerank.utils import get_file_logger, clean_text

libs_path = os.path.dirname(__file__)
config = configparser.ConfigParser()
config.read(os.path.join(os.path.dirname(__file__), "config.ini"))

from datetime import datetime

formatted_time = datetime.now().strftime("%m%d%Y_%H:%M:%S")

logger = get_file_logger(
    os.path.join(libs_path, config.get("ELICITED_RESPONSE", "log_dir")),
    os.path.join(
        libs_path,
        config.get("ELICITED_RESPONSE", "log_dir"),
        f"rank_er__{formatted_time}.log",
    ),
    also_print=True,
)

model_names = ["toxicity_trigger", "attracted_sentiment"]
platforms = ["twitter", "reddit"]


s3_region_name = config.get("S3", "S3_REGION_NAME")
s3_access_key = config.get("S3", "S3_ACCESS_KEY")
s3_access_key_secret = config.get("S3", "S3_SECRET_ACCESS_KEY")
s3_bucket = config.get("S3", "S3_BUCKET")

s3 = boto3.resource(
    service_name="s3",
    region_name=s3_region_name,
    aws_access_key_id=s3_access_key,
    aws_secret_access_key=s3_access_key_secret,
)

my_bucket = s3.Bucket(s3_bucket)

ER_model_folders = [
    "attracted_sentiment_roberta_reddit",
    "attracted_sentiment_roberta_twitter",
    "toxicity_trigger_roberta_reddit",
    "toxicity_trigger_roberta_twitter",
]

for fol in ER_model_folders:
    if not os.path.exists("models/ER/" + fol):
        os.makedirs("models/ER/" + fol)
    for obj in my_bucket.objects.filter(Prefix="models/ER/" + fol):
        my_bucket.download_file(obj.key, obj.key)

# load MODEL_PIPELINES
MODEL_PIPELINES = defaultdict()
for model_name in model_names:
    for platform in platforms:
        logger.info(f"Loading {model_name}_{platform} model..")
        model_path = os.path.join(
            libs_path, config.get("ELICITED_RESPONSE", f"{model_name}_{platform}")
        )
        tokenizer = AutoTokenizer.from_pretrained(
            pretrained_model_name_or_path=model_path
        )
        model = AutoModelForSequenceClassification.from_pretrained(
            pretrained_model_name_or_path=model_path,
            num_labels=1,
            ignore_mismatched_sizes=True,
        )
        pipeline = TextClassificationPipeline(
            model=model,
            tokenizer=tokenizer,
            max_length=512,
            truncation=True,
            batch_size=8,
            # top_k=None,
            # device="cuda",  # uncomment if GPU is available
        )
        MODEL_PIPELINES[f"{model_name}_{platform}"] = pipeline
        logger.info(f"Loaded {model_name}_{platform} model.")


def har_prediction(texts, platform):
    """
    Calculates the HArmful Response (HaR) score for a given social media post.

    Parameters:
    texts (list of str): texts from social media posts.
    platform (str): the type of social media: {'twitter', 'reddit', 'facebook'}

    Returns:
    HaR score (float): The predicted HaR score for a feed_post
    """
    if (platform.lower() == "twitter") | (platform.lower() == "facebook"):
        model = MODEL_PIPELINES["toxicity_trigger_twitter"]
    else:
        model = MODEL_PIPELINES["toxicity_trigger_reddit"]

    try:
        scores = [res["score"] for res in model.predict(texts)]  # generate the score
        return scores
    except Exception as e:
        logger.exception(e)
        # .54 is the avg score generated by the model for a test set of 250k posts
        return [0.54] * len(texts)


def ar_prediction(texts, platform):
    """
    Calculates the Affect Response (AR) score for a given social media post.

    Parameters:
    texts (list of str): texts from social media posts.
    platform (str): the type of social media: {'twitter', 'reddit', 'facebook'}

    Returns:
    AR score (float): The predicted AR score for a feed_post
    """
    if (platform.lower() == "twitter") | (platform.lower() == "facebook"):
        model = MODEL_PIPELINES["attracted_sentiment_twitter"]
    else:
        model = MODEL_PIPELINES["attracted_sentiment_reddit"]

    try:
        scores = [res["score"] for res in model.predict(texts)]  # generate the score
        return scores

    except Exception as e:
        logger.exception(e)
        # .5 is the avg score generated by the model for a test set of 250k posts
        return [0.5] * len(texts)
